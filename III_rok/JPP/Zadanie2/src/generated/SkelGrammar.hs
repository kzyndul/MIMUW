-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelGrammar where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsGrammar

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsGrammar.Ident -> Result
transIdent x = case x of
  AbsGrammar.Ident string -> failure x

transProgram :: AbsGrammar.Program -> Result
transProgram x = case x of
  AbsGrammar.PProgram fns -> failure x

transFn :: AbsGrammar.Fn -> Result
transFn x = case x of
  AbsGrammar.FnDef type_ ident args block -> failure x

transArg :: AbsGrammar.Arg -> Result
transArg x = case x of
  AbsGrammar.AArg type_ ident -> failure x
  AbsGrammar.RefArg type_ ident -> failure x

transBlock :: AbsGrammar.Block -> Result
transBlock x = case x of
  AbsGrammar.Block stmts -> failure x

transStmt :: AbsGrammar.Stmt -> Result
transStmt x = case x of
  AbsGrammar.BStmt block -> failure x
  AbsGrammar.Decl type_ items -> failure x
  AbsGrammar.SExp expr -> failure x
  AbsGrammar.Ass ident expr -> failure x
  AbsGrammar.Ret expr -> failure x
  AbsGrammar.ListPush ident expr -> failure x
  AbsGrammar.ListPop ident -> failure x
  AbsGrammar.Print expr -> failure x
  AbsGrammar.Cond expr block -> failure x
  AbsGrammar.CondElse expr block1 block2 -> failure x
  AbsGrammar.Break -> failure x
  AbsGrammar.Continue -> failure x
  AbsGrammar.While expr block -> failure x
  AbsGrammar.FnDecl fn -> failure x

transItem :: AbsGrammar.Item -> Result
transItem x = case x of
  AbsGrammar.NoInit ident -> failure x
  AbsGrammar.Init ident expr -> failure x

transType :: AbsGrammar.Type -> Result
transType x = case x of
  AbsGrammar.Int -> failure x
  AbsGrammar.Str -> failure x
  AbsGrammar.Bool -> failure x
  AbsGrammar.TList type_ -> failure x
  AbsGrammar.Fun type_ typeorrefs -> failure x

transTypeOrRef :: AbsGrammar.TypeOrRef -> Result
transTypeOrRef x = case x of
  AbsGrammar.TypeOrRefType type_ -> failure x
  AbsGrammar.TypeOrRefRef type_ -> failure x

transExpr :: AbsGrammar.Expr -> Result
transExpr x = case x of
  AbsGrammar.EVar ident -> failure x
  AbsGrammar.EListEmpty type_ exprs -> failure x
  AbsGrammar.ELitInt integer -> failure x
  AbsGrammar.ELitTrue -> failure x
  AbsGrammar.ELitFalse -> failure x
  AbsGrammar.EString string -> failure x
  AbsGrammar.EApp expr exprorrefs -> failure x
  AbsGrammar.EListLength ident -> failure x
  AbsGrammar.EListAt ident expr -> failure x
  AbsGrammar.Neg expr -> failure x
  AbsGrammar.Not expr -> failure x
  AbsGrammar.EMul expr1 mulop expr2 -> failure x
  AbsGrammar.EAdd expr1 addop expr2 -> failure x
  AbsGrammar.ERel expr1 relop expr2 -> failure x
  AbsGrammar.EAnd expr1 expr2 -> failure x
  AbsGrammar.EOr expr1 expr2 -> failure x

transExprOrRef :: AbsGrammar.ExprOrRef -> Result
transExprOrRef x = case x of
  AbsGrammar.ERExpr expr -> failure x
  AbsGrammar.ERRef ident -> failure x

transAddOp :: AbsGrammar.AddOp -> Result
transAddOp x = case x of
  AbsGrammar.Plus -> failure x
  AbsGrammar.Minus -> failure x

transMulOp :: AbsGrammar.MulOp -> Result
transMulOp x = case x of
  AbsGrammar.Times -> failure x
  AbsGrammar.Div -> failure x

transRelOp :: AbsGrammar.RelOp -> Result
transRelOp x = case x of
  AbsGrammar.LTH -> failure x
  AbsGrammar.LE -> failure x
  AbsGrammar.GTH -> failure x
  AbsGrammar.GE -> failure x
  AbsGrammar.EQU -> failure x
  AbsGrammar.NE -> failure x
