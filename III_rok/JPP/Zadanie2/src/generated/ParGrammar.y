-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParGrammar
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified AbsGrammar
import LexGrammar

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'        { PT _ (TS _ 1)  }
  '!='       { PT _ (TS _ 2)  }
  '&&'       { PT _ (TS _ 3)  }
  '('        { PT _ (TS _ 4)  }
  ')'        { PT _ (TS _ 5)  }
  '*'        { PT _ (TS _ 6)  }
  '+'        { PT _ (TS _ 7)  }
  ','        { PT _ (TS _ 8)  }
  '-'        { PT _ (TS _ 9)  }
  '.'        { PT _ (TS _ 10) }
  '/'        { PT _ (TS _ 11) }
  ';'        { PT _ (TS _ 12) }
  '<'        { PT _ (TS _ 13) }
  '<='       { PT _ (TS _ 14) }
  '='        { PT _ (TS _ 15) }
  '=='       { PT _ (TS _ 16) }
  '>'        { PT _ (TS _ 17) }
  '>='       { PT _ (TS _ 18) }
  'List'     { PT _ (TS _ 19) }
  '['        { PT _ (TS _ 20) }
  ']'        { PT _ (TS _ 21) }
  'bool'     { PT _ (TS _ 22) }
  'break'    { PT _ (TS _ 23) }
  'continue' { PT _ (TS _ 24) }
  'else'     { PT _ (TS _ 25) }
  'false'    { PT _ (TS _ 26) }
  'if'       { PT _ (TS _ 27) }
  'int'      { PT _ (TS _ 28) }
  'length'   { PT _ (TS _ 29) }
  'pop'      { PT _ (TS _ 30) }
  'print'    { PT _ (TS _ 31) }
  'push'     { PT _ (TS _ 32) }
  'ref'      { PT _ (TS _ 33) }
  'return'   { PT _ (TS _ 34) }
  'string'   { PT _ (TS _ 35) }
  'true'     { PT _ (TS _ 36) }
  'while'    { PT _ (TS _ 37) }
  '{'        { PT _ (TS _ 38) }
  '||'       { PT _ (TS _ 39) }
  '}'        { PT _ (TS _ 40) }
  L_Ident    { PT _ (TV $$)   }
  L_integ    { PT _ (TI $$)   }
  L_quoted   { PT _ (TL $$)   }

%%

Ident :: { AbsGrammar.Ident }
Ident  : L_Ident { AbsGrammar.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

Program :: { AbsGrammar.Program }
Program : ListFn { AbsGrammar.PProgram $1 }

Fn :: { AbsGrammar.Fn }
Fn
  : Type Ident '(' ListArg ')' Block { AbsGrammar.FnDef $1 $2 $4 $6 }

ListFn :: { [AbsGrammar.Fn] }
ListFn : Fn { (:[]) $1 } | Fn ListFn { (:) $1 $2 }

Arg :: { AbsGrammar.Arg }
Arg
  : Type Ident { AbsGrammar.AArg $1 $2 }
  | 'ref' Type Ident { AbsGrammar.RefArg $2 $3 }

ListArg :: { [AbsGrammar.Arg] }
ListArg
  : {- empty -} { [] }
  | Arg { (:[]) $1 }
  | Arg ',' ListArg { (:) $1 $3 }

Block :: { AbsGrammar.Block }
Block : '{' ListStmt '}' { AbsGrammar.Block $2 }

ListStmt :: { [AbsGrammar.Stmt] }
ListStmt
  : {- empty -} { [] }
  | Stmt { (:[]) $1 }
  | Stmt ';' ListStmt { (:) $1 $3 }

Stmt :: { AbsGrammar.Stmt }
Stmt
  : Block { AbsGrammar.BStmt $1 }
  | Type ListItem { AbsGrammar.Decl $1 $2 }
  | Expr { AbsGrammar.SExp $1 }
  | Ident '=' Expr { AbsGrammar.Ass $1 $3 }
  | 'return' Expr { AbsGrammar.Ret $2 }
  | Ident '.' 'push' Expr { AbsGrammar.ListPush $1 $4 }
  | Ident '.' 'pop' { AbsGrammar.ListPop $1 }
  | 'print' Expr { AbsGrammar.Print $2 }
  | 'if' Expr Block { AbsGrammar.Cond $2 $3 }
  | 'if' Expr Block 'else' Block { AbsGrammar.CondElse $2 $3 $5 }
  | 'break' { AbsGrammar.Break }
  | 'continue' { AbsGrammar.Continue }
  | 'while' Expr Block { AbsGrammar.While $2 $3 }
  | Fn { AbsGrammar.FnDecl $1 }

Item :: { AbsGrammar.Item }
Item
  : Ident { AbsGrammar.NoInit $1 }
  | Ident '=' Expr { AbsGrammar.Init $1 $3 }

ListItem :: { [AbsGrammar.Item] }
ListItem : Item { (:[]) $1 } | Item ',' ListItem { (:) $1 $3 }

Type :: { AbsGrammar.Type }
Type
  : 'int' { AbsGrammar.Int }
  | 'string' { AbsGrammar.Str }
  | 'bool' { AbsGrammar.Bool }
  | 'List' '<' Type '>' { AbsGrammar.TList $3 }

ListType :: { [AbsGrammar.Type] }
ListType
  : {- empty -} { [] }
  | Type { (:[]) $1 }
  | Type ',' ListType { (:) $1 $3 }

TypeOrRef :: { AbsGrammar.TypeOrRef }
TypeOrRef
  : Type { AbsGrammar.TypeOrRefType $1 }
  | 'ref' Type { AbsGrammar.TypeOrRefRef $2 }

ListTypeOrRef :: { [AbsGrammar.TypeOrRef] }
ListTypeOrRef
  : {- empty -} { [] }
  | TypeOrRef { (:[]) $1 }
  | TypeOrRef ',' ListTypeOrRef { (:) $1 $3 }

Expr7 :: { AbsGrammar.Expr }
Expr7
  : Ident { AbsGrammar.EVar $1 }
  | Type '[' ListExpr ']' { AbsGrammar.EListEmpty $1 $3 }
  | Integer { AbsGrammar.ELitInt $1 }
  | 'true' { AbsGrammar.ELitTrue }
  | 'false' { AbsGrammar.ELitFalse }
  | String { AbsGrammar.EString $1 }
  | '(' Expr ')' { $2 }

Expr6 :: { AbsGrammar.Expr }
Expr6
  : Expr6 '(' ListExprOrRef ')' { AbsGrammar.EApp $1 $3 }
  | Expr7 { $1 }

Expr5 :: { AbsGrammar.Expr }
Expr5
  : Ident '.' 'length' { AbsGrammar.EListLength $1 }
  | Ident '[' Expr ']' { AbsGrammar.EListAt $1 $3 }
  | '-' Expr6 { AbsGrammar.Neg $2 }
  | '!' Expr6 { AbsGrammar.Not $2 }
  | Expr6 { $1 }

Expr4 :: { AbsGrammar.Expr }
Expr4
  : Expr4 MulOp Expr5 { AbsGrammar.EMul $1 $2 $3 } | Expr5 { $1 }

Expr3 :: { AbsGrammar.Expr }
Expr3
  : Expr3 AddOp Expr4 { AbsGrammar.EAdd $1 $2 $3 } | Expr4 { $1 }

Expr2 :: { AbsGrammar.Expr }
Expr2
  : Expr2 RelOp Expr3 { AbsGrammar.ERel $1 $2 $3 } | Expr3 { $1 }

Expr1 :: { AbsGrammar.Expr }
Expr1 : Expr2 '&&' Expr1 { AbsGrammar.EAnd $1 $3 } | Expr2 { $1 }

Expr :: { AbsGrammar.Expr }
Expr : Expr1 '||' Expr { AbsGrammar.EOr $1 $3 } | Expr1 { $1 }

ListExpr :: { [AbsGrammar.Expr] }
ListExpr
  : {- empty -} { [] }
  | Expr { (:[]) $1 }
  | Expr ',' ListExpr { (:) $1 $3 }

ExprOrRef :: { AbsGrammar.ExprOrRef }
ExprOrRef
  : Expr { AbsGrammar.ERExpr $1 }
  | 'ref' Ident { AbsGrammar.ERRef $2 }

ListExprOrRef :: { [AbsGrammar.ExprOrRef] }
ListExprOrRef
  : {- empty -} { [] }
  | ExprOrRef { (:[]) $1 }
  | ExprOrRef ',' ListExprOrRef { (:) $1 $3 }

AddOp :: { AbsGrammar.AddOp }
AddOp : '+' { AbsGrammar.Plus } | '-' { AbsGrammar.Minus }

MulOp :: { AbsGrammar.MulOp }
MulOp : '*' { AbsGrammar.Times } | '/' { AbsGrammar.Div }

RelOp :: { AbsGrammar.RelOp }
RelOp
  : '<' { AbsGrammar.LTH }
  | '<=' { AbsGrammar.LE }
  | '>' { AbsGrammar.GTH }
  | '>=' { AbsGrammar.GE }
  | '==' { AbsGrammar.EQU }
  | '!=' { AbsGrammar.NE }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

